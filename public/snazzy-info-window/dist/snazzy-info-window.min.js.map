{"version":3,"sources":["snazzy-info-window.js"],"names":["copyKeys","target","source","Object","keys","forEach","key","mergeDefaultOptions","opts","copy","_defaultOptions","obj","_typeof","objCopy","parseAttribute","attribute","defaultValue","re","test","match","exec","number","units","value","original","setHTML","container","content","firstChild","removeChild","innerHTML","appendChild","oppositePosition","p","capitalizePosition","charAt","toUpperCase","slice","_classPrefix","_root2","_inverseRoot2","_defaultShadow","h","v","blur","spread","color","position","pointer","openOnMarkerClick","closeOnMapClick","showCloseButton","panOnOpen","edgeOffset","top","right","bottom","left","SnazzyInfoWindow","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","call","_html","_opts","_callbacks","callbacks","_marker","marker","_isOpen","_listeners","google","_openOnMarkerClickListener","maps","event","addListener","getMap","open","toLowerCase","undefined","border","shadow","callback","lamda","apply","listener","removeListener","result","activateCallback","setMap","clearListeners","wrapper","_this2","offset","style","marginLeft","marginTop","bg","backgroundColor","contentWrapper","pointerBg","padding","shadowFrame","borderRadius","fontSize","fontColor","shadowPointer","width","height","pointerBorder","borderWidth","bWidth","Math","round","offsetWidth","clientWidth","pLength","min","offsetHeight","triangleDiff","reverseP","borderColor","isSet","hOffset","vOffset","formatBoxShadow","boxShadow","hRotated","vRotated","shadowPointerInner","opacity","shadowWrapper","markerPos","getProjection","fromLatLngToDivPixel","floatWrapper","floor","y","x","resize","reposition","_this3","applyCss","element","args","i","length","className","newElement","_len","arguments","Array","_key","document","createElement","wrapperClass","closeButtonMarkup","d","closeButton","setAttribute","getPanes","floatPane","map","push","close","_previousWidth","_previousHeight","getDiv","ow","oh","pw","ph","draw","addDomListener","e","cancelBubble","stopPropagation","mouseEvents","parent","parentElement","mb","getBoundingClientRect","mib","getMapInnerBounds","wb","dx","dy","panBy","maxWidth","maxHeight","OverlayView"],"mappings":"k0BA2BA,QAASA,GAASC,EAAQC,GAClBD,GAAUC,GACVC,OAAOC,KAAKF,GAAQG,QAAQ,SAACC,GACzBL,EAAOK,GAAOJ,EAAOI,KAOjC,QAASC,GAAoBC,GACzB,GAAMC,KAYN,OAXAT,GAASS,EAAMC,GACfV,EAASS,EAAMD,GACfL,OAAOC,KAAKM,GAAiBL,QAAQ,SAACC,GAClC,GAAMK,GAAMD,EAAgBJ,EAC5B,IAAmB,YAAf,mBAAOK,GAAP,YAAAC,EAAOD,IAAkB,CACzB,GAAME,KACNb,GAASa,EAASF,GAClBX,EAASa,EAASJ,EAAKH,IACvBG,EAAKH,GAAOO,KAGbJ,EAIX,QAASK,GAAeC,EAAWC,GAE/B,GAAMC,GAAK,2CACX,IAAIF,GAAaE,EAAGC,KAAKH,GAAY,CACjC,GAAMI,GAAQF,EAAGG,KAAKL,GAChBM,EAASF,EAAM,GACfG,EAAQH,EAAM,IAAM,IAC1B,QAASI,MAAgB,EAATF,EAAYC,MAAAA,EAAOE,SAAUT,GAEjD,MAAIC,GACOF,EAAeE,IAEjBQ,SAAUR,GAKvB,QAASS,GAAQC,EAAWC,GACxB,GAAID,EAAW,CAEX,KAAOA,EAAUE,YACbF,EAAUG,YAAYH,EAAUE,WAEhCD,KACuB,gBAAZA,GACPD,EAAUI,UAAYH,EAEtBD,EAAUK,YAAYJ,KAOtC,QAASK,GAAiBC,GACtB,MAAU,QAANA,EACO,SACM,WAANA,EACA,MACM,SAANA,EACA,QACM,UAANA,EACA,OAEJA,EAIX,QAASC,GAAmBD,GACxB,MAAOA,GAAEE,OAAO,GAAGC,cAAgBH,EAAEI,MAAM,yfAtGzCC,EAAe,MACfC,EAAS,cACTC,EAAgB,kBAChBC,GACFC,EAAG,MACHC,EAAG,MACHC,KAAM,MACNC,OAAQ,MACRC,MAAO,QAELpC,GACFqC,SAAU,MACVC,SAAS,EACTC,mBAAmB,EACnBC,iBAAiB,EACjBC,iBAAiB,EACjBC,WAAW,EACXC,YACIC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,KAoFOC,cAEjB,QAAAA,GAAYlD,GAAMmD,EAAAC,KAAAF,EAAA,IAAAG,GAAAC,EAAAF,MAAAF,EAAAK,WAAA5D,OAAA6D,eAAAN,IAAAO,KAAAL,KACRpD,GAENqD,GAAKK,MAAQ,KACbL,EAAKM,MAAQ5D,EAAoBC,GACjCqD,EAAKO,WAAaP,EAAKM,MAAME,cAC7BR,EAAKS,QAAUT,EAAKM,MAAMI,OAC1BV,EAAKW,SAAU,EACfX,EAAKY,cAGDC,QAAUb,EAAKS,SAAWT,EAAKM,MAAMlB,oBACrCY,EAAKc,2BAA6BD,OAAOE,KAAKC,MAAMC,YAAYjB,EAAKS,QAAS,QAAS,WAC9ET,EAAKkB,UACNlB,EAAKmB,SAMjB,IAAI/C,GAAI4B,EAAKM,MAAMpB,QApBL,OAqBVd,KACAA,EAAIA,EAAEgD,eAEA,QAANhD,GAAqB,WAANA,GACT,SAANA,GAAsB,UAANA,IAChB4B,EAAKM,MAAMpB,SAAWrC,EAAgBqC,UAEhBmC,SAAtBrB,EAAKM,MAAMgB,QAAwBtB,EAAKM,MAAMgB,UAAW,IACzDtB,EAAKM,MAAMgB,WAEYD,SAAvBrB,EAAKM,MAAMnB,UACXa,EAAKM,MAAMnB,QAAUtC,EAAgBsC,SAEfkC,SAAtBrB,EAAKM,MAAMiB,QAAwBvB,EAAKM,MAAMiB,UAAW,IACzDvB,EAAKM,MAAMiB,WAnCDvB,4DAwCDwB,GACb,GAAMC,GAAQ1B,KAAKQ,WAAWiB,EAC9B,OAAOC,GAAQA,EAAMC,MAAM3B,MAAQsB,gDAK/BR,SACId,KAAKa,YACLb,KAAKa,WAAWpE,QAAQ,SAACmF,GACrBd,OAAOE,KAAKC,MAAMY,eAAeD,KAGzC5B,KAAKa,8CAMT,GAAMiB,GAAS9B,KAAK+B,iBAAiB,eACtBT,SAAXQ,GAAyBA,IAGzB9B,KAAKU,SACLV,KAAKgC,OAAOhC,KAAKU,QAAQS,0CAM7B,GAAMW,GAAS9B,KAAK+B,iBAAiB,gBACtBT,SAAXQ,GAAyBA,KAG7B9B,KAAKiC,iBACLjC,KAAKgC,OAAO,yCAKRhC,KAAKmB,UACLnB,KAAKgC,OAAO,MAGZlB,QACId,KAAKe,6BACLD,OAAOE,KAAKC,MAAMY,eAAe7B,KAAKe,4BACtCf,KAAKe,2BAA6B,MAG1Cf,KAAKiC,oDAGElE,GACPiC,KAAKO,MAAMxC,QAAUA,EACjBiC,KAAKM,OAASN,KAAKM,MAAMvC,SACzBF,EAAQmC,KAAKM,MAAMvC,QAASA,wCAKhC,MAAIiC,MAAKM,MACEN,KAAKM,MAAM4B,QAEf,oCAIJ,GAAAC,GAAAnC,IACH,IAAKA,KAAKU,SAAYV,KAAKM,MAA3B,CAKA,GAAM8B,GAASpC,KAAKO,MAAM6B,MACtBA,KACIA,EAAOvC,OACPG,KAAKM,MAAM4B,QAAQG,MAAMC,WAAaF,EAAOvC,MAE7CuC,EAAO1C,MACPM,KAAKM,MAAM4B,QAAQG,MAAME,UAAYH,EAAO1C,KAIpD,IAAM8C,GAAKxC,KAAKO,MAAMkC,eA2CtB,IA1CID,IACAxC,KAAKM,MAAMoC,eAAeL,MAAMI,gBAAkBD,EAC9CxC,KAAKO,MAAMnB,UACXY,KAAKM,MAAMqC,UAAUN,MAArB,SAAoC/D,EAAmB0B,KAAKO,MAAMpB,UAAlE,SAAsFqD,IAI1FxC,KAAKO,MAAMqC,UACX5C,KAAKM,MAAMoC,eAAeL,MAAMO,QAAU5C,KAAKO,MAAMqC,QACjD5C,KAAKO,MAAMiB,SACXxB,KAAKM,MAAMuC,YAAYR,MAAMO,QAAU5C,KAAKO,MAAMqC,UAItD5C,KAAKO,MAAMuC,eACX9C,KAAKM,MAAMoC,eAAeL,MAAMS,aAAe9C,KAAKO,MAAMuC,aACtD9C,KAAKO,MAAMiB,SACXxB,KAAKM,MAAMuC,YAAYR,MAAMS,aAAe9C,KAAKO,MAAMuC,eAI3D9C,KAAKO,MAAMwC,WACX/C,KAAKM,MAAM4B,QAAQG,MAAMU,SAAW/C,KAAKO,MAAMwC,UAG/C/C,KAAKO,MAAMyC,YACXhD,KAAKM,MAAMoC,eAAeL,MAAMnD,MAAQc,KAAKO,MAAMyC,WAInDhD,KAAKO,MAAMnB,SAAWY,KAAKO,MAAMnB,WAAY,IACzCY,KAAKO,MAAMiB,SACXxB,KAAKM,MAAM2C,cAAcZ,MAAMa,MAAQlD,KAAKO,MAAMnB,QAClDY,KAAKM,MAAM2C,cAAcZ,MAAMc,OAASnD,KAAKO,MAAMnB,SAEnDY,KAAKM,MAAM8C,gBACXpD,KAAKM,MAAM8C,cAAcf,MAAMgB,YAAcrD,KAAKO,MAAMnB,SAE5DY,KAAKM,MAAMqC,UAAUN,MAAMgB,YAAcrD,KAAKO,MAAMnB,SAIpDY,KAAKO,MAAMgB,OAAQ,CAEnB,GAAI+B,GAAS,CASb,IARgChC,SAA5BtB,KAAKO,MAAMgB,OAAO2B,QAClBI,EAASpG,EAAe8C,KAAKO,MAAMgB,OAAO2B,MAAO,OACjDlD,KAAKM,MAAMoC,eAAeL,MAAMgB,YAAcC,EAAO3F,MAAQ2F,EAAO5F,OAExE4F,EAASC,KAAKC,OAAOxD,KAAKM,MAAMoC,eAAee,YACtCzD,KAAKM,MAAMoC,eAAegB,aAAe,GAClDJ,EAASpG,EAAkBoG,EAAlB,KAA8B,OAEnCtD,KAAKO,MAAMnB,QAAS,CAEpB,GAAIuE,GAAUJ,KAAKK,IAAI5D,KAAKM,MAAM8C,cAAcS,aACzB7D,KAAKM,MAAM8C,cAAcK,YAChDE,GAAUzG,EAAkByG,EAAlB,KAA+B,MAEzC,IAAIG,GAAeP,KAAKC,MAAMF,EAAO3F,OAASgB,EAAS,GACvDmF,GAAeP,KAAKK,IAAIE,EAAcH,EAAQhG,OAE9CqC,KAAKM,MAAMqC,UAAUN,MAAMgB,YACtBM,EAAQhG,MAAQmG,EAAgBH,EAAQjG,KAE7C,IAAMqG,GAAWzF,EAAmBF,EAAiB4B,KAAKO,MAAMpB,UAChEa,MAAKM,MAAMqC,UAAUN,MAArB,SAAoC0B,GAChCD,EAAeR,EAAO5F,MAC1BsC,KAAKM,MAAMqC,UAAUN,MAAMrC,KAAKO,MAAMpB,WACjCmE,EAAO3F,MAAQ2F,EAAO5F,MAE/B,GAAMwB,GAAQc,KAAKO,MAAMgB,OAAOrC,KAC5BA,KACAc,KAAKM,MAAMoC,eAAeL,MAAM2B,YAAc9E,EAC1Cc,KAAKM,MAAM8C,gBACXpD,KAAKM,MAAM8C,cAAcf,MAAzB,SAAwC/D,EAAmB0B,KAAKO,MAAMpB,UAAtE,SAA0FD,IAKlGc,KAAKO,MAAMiB,SAAQ,WAEnB,GAAMA,GAASW,EAAK5B,MAAMiB,OACpByC,EAAQ,SAAC9G,GACX,GAAM4B,GAAIyC,EAAOrE,EACjB,OAAamE,UAANvC,GAAwB,MAALA,IAG1BkF,EAAM,MAAQA,EAAM,MAAQA,EAAM,SAAWA,EAAM,WAAaA,EAAM,YAAU,WAChF,GAAMC,GAAUhH,EAAesE,EAAO1C,EAAGD,EAAeC,GAClDqF,EAAUjH,EAAesE,EAAOzC,EAAGF,EAAeE,GAClDC,EAAO9B,EAAesE,EAAOxC,KAAMH,EAAeG,MAClDC,EAAS/B,EAAesE,EAAOvC,OAAQJ,EAAeI,QACtDC,EAAQsC,EAAOtC,OAASL,EAAeK,MACvCkF,EAAkB,SAACtF,EAAGC,GACxB,MAAUD,GAAV,IAAeC,EAAf,IAAoBC,EAAKpB,SAAzB,IAAqCqB,EAAOrB,SAA5C,IAAwDsB,EAG5DiD,GAAK7B,MAAMuC,YAAYR,MAAMgC,UACzBD,EAAgBF,EAAQtG,SAAUuG,EAAQvG,SAG9C,IAAM0G,GAAY1F,GAAiBsF,EAAQvG,MAAQwG,EAAQxG,OAAUuG,EAAQxG,MACvE6G,EAAY3F,GAAiBsF,EAAQvG,MAAQwG,EAAQxG,OAAUwG,EAAQzG,KAC7EyE,GAAK7B,MAAMkE,mBAAmBnC,MAAMgC,UAAYD,EAAgBE,EAAUC,MAE1EpC,EAAK5B,MAAMiB,OAAOiD,UAClBtC,EAAK7B,MAAMoE,cAAcrC,MAAMoC,QAAUtC,EAAK5B,MAAMiB,OAAOiD,WAInE,IAAME,GAAY3E,KAAK4E,gBAAgBC,qBAAqB7E,KAAKU,QAAQvB,SACzEa,MAAKM,MAAMwE,aAAazC,MAAM3C,IAAS6D,KAAKwB,MAAMJ,EAAUK,GAA5D,KACAhF,KAAKM,MAAMwE,aAAazC,MAAMxC,KAAU0D,KAAKwB,MAAMJ,EAAUM,GAA7D,KAEKjF,KAAKY,UACNZ,KAAKY,SAAU,EACfZ,KAAKkF,SACLlF,KAAKmF,aACLnF,KAAK+B,iBAAiB,+CAKtB,GAAAqD,GAAApF,IACJ,KAAIA,KAAKM,MAAT,CAIA,GAAM+E,GAAW,SAACC,EAASC,GACvB,GAAID,GAAWC,EACX,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CAClC,GAAME,GAAYH,EAAKC,EACnBE,KACIJ,EAAQI,YACRJ,EAAQI,WAAa,KAEzBJ,EAAQI,WAAahH,EAAegH,KAK9CC,EAAa,WAAa,IAAA,GAAAC,GAAAC,UAAAJ,OAATF,EAASO,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAATR,EAASQ,GAAAF,UAAAE,EAC5B,IAAMT,GAAUU,SAASC,cAAc,MAEvC,OADAZ,GAASC,EAASC,GACXD,EAsDX,IAnDAtF,KAAKM,SAGLN,KAAKM,MAAM4B,QAAUyD,EAAAA,WACN3F,KAAKO,MAAMpB,UAEtBa,KAAKO,MAAM2F,eACXlG,KAAKM,MAAM4B,QAAQwD,WAAnB,IAAoC1F,KAAKO,MAAM2F,cAE/ClG,KAAKO,MAAMgB,QACX8D,EAASrF,KAAKM,MAAM4B,SAAU,eAI9BlC,KAAKO,MAAMiB,SACXxB,KAAKM,MAAMoE,cAAgBiB,EAAAA,kBACL3F,KAAKO,MAAMpB,UAEjCa,KAAKM,MAAMuC,YAAc8C,EACrB,QACA,gBAEJ3F,KAAKM,MAAMoE,cAAcvG,YAAY6B,KAAKM,MAAMuC,aAE5C7C,KAAKO,MAAMnB,UACXY,KAAKM,MAAM2C,cAAgB0C,EAAAA,kBACL3F,KAAKO,MAAMpB,UAEjCa,KAAKM,MAAMkE,mBAAqBmB,EAAAA,wBACJ3F,KAAKO,MAAMpB,UAEvCa,KAAKM,MAAM2C,cAAc9E,YAAY6B,KAAKM,MAAMkE,oBAChDxE,KAAKM,MAAMoE,cAAcvG,YAAY6B,KAAKM,MAAM2C,gBAGpDjD,KAAKM,MAAM4B,QAAQ/D,YAAY6B,KAAKM,MAAMoE,gBAI9C1E,KAAKM,MAAMoC,eAAiBiD,EACxB,QACA,mBAEJ3F,KAAKM,MAAMvC,QAAU4H,EACjB,WAEA3F,KAAKO,MAAMxC,SACXF,EAAQmC,KAAKM,MAAMvC,QAASiC,KAAKO,MAAMxC,SAIvCiC,KAAKO,MAAMhB,gBAAiB,CAC5B,GAAIS,KAAKO,MAAM4F,kBAAmB,CAC9B,GAAMC,GAAIJ,SAASC,cAAc,MACjCpI,GAAQuI,EAAGpG,KAAKO,MAAM4F,mBACtBnG,KAAKM,MAAM+F,YAAcD,EAAEpI,eAE3BgC,MAAKM,MAAM+F,YAAcL,SAASC,cAAc,UAChDjG,KAAKM,MAAM+F,YAAYC,aAAa,OAAQ,UAC5CtG,KAAKM,MAAM+F,YAAYnI,UAAY,SACnCmH,EAASrF,KAAKM,MAAM+F,aAAc,gBAEtCrG,MAAKM,MAAMoC,eAAevE,YAAY6B,KAAKM,MAAM+F,aAErDrG,KAAKM,MAAMoC,eAAevE,YAAY6B,KAAKM,MAAMvC,SACjDiC,KAAKM,MAAM4B,QAAQ/D,YAAY6B,KAAKM,MAAMoC,gBAGtC1C,KAAKO,MAAMnB,UACPY,KAAKO,MAAMgB,SACXvB,KAAKM,MAAM8C,cAAgBuC,EAAAA,WACZ3F,KAAKO,MAAMpB,SADC,kBAELa,KAAKO,MAAMpB,UAEjCa,KAAKM,MAAM4B,QAAQ/D,YAAY6B,KAAKM,MAAM8C,gBAE9CpD,KAAKM,MAAMqC,UAAYgD,EAAAA,WACR3F,KAAKO,MAAMpB,SADH,cAELa,KAAKO,MAAMpB,UAE7Ba,KAAKM,MAAM4B,QAAQ/D,YAAY6B,KAAKM,MAAMqC,YAI9C3C,KAAKM,MAAMwE,aAAea,EACtB,iBAEJ3F,KAAKM,MAAMwE,aAAa3G,YAAY6B,KAAKM,MAAM4B,SAG/ClC,KAAKuG,WAAWC,UAAUrI,YAAY6B,KAAKM,MAAMwE,aAGjD,IAAM2B,GAAMzG,KAAKmB,QAOjB,IANAnB,KAAKiC,iBACDjC,KAAKO,MAAMjB,iBACXU,KAAKa,WAAW6F,KAAK5F,OAAOE,KAAKC,MAAMC,YAAYuF,EAAK,QAAS,WAC7DrB,EAAKuB,WAGT7F,OAAQ,CAERd,KAAK4G,eAAiB,KACtB5G,KAAK6G,gBAAkB,KACvB7G,KAAKa,WAAW6F,KAAK5F,OAAOE,KAAKC,MAAMC,YAAYuF,EAAK,iBAAkB,WACtE,GAAML,GAAIK,EAAIK,SACRC,EAAKX,EAAE3C,YACPuD,EAAKZ,EAAEvC,aACPoD,EAAK7B,EAAKwB,eACVM,EAAK9B,EAAKyB,eACL,QAAPI,GAAsB,OAAPC,GAAeD,IAAOF,GAAMG,IAAOF,IAClD5B,EAAKwB,eAAiBG,EACtB3B,EAAKyB,gBAAkBG,EACvB5B,EAAKF,aAKTlF,KAAKU,SACLV,KAAKa,WAAW6F,KAAK5F,OAAOE,KAAKC,MAAMC,YAAYlB,KAAKU,QACpD,mBAAoB,WAChB0E,EAAK+B,UAKbnH,KAAKO,MAAMhB,kBAAoBS,KAAKO,MAAM4F,mBAC1CnG,KAAKa,WAAW6F,KAAK5F,OAAOE,KAAKC,MAAMmG,eAAepH,KAAKM,MAAM+F,YAC7D,QAAS,SAACgB,GACNA,EAAEC,cAAe,EACbD,EAAEE,iBACFF,EAAEE,kBAENnC,EAAKuB,UAKjB,IAAMa,IAAe,QAAS,WAAY,aAAc,cACpD,OAAQ,UAAW,YACnB,YAAa,WAAY,YAAa,UACtC,aAAc,WAAY,YAC1B,QAAS,aAAc,iBAAkB,sBAC7CA,GAAY/K,QAAQ,SAACwE,GACjBmE,EAAKvE,WAAW6F,KAAK5F,OAAOE,KAAKC,MAAMmG,eAAehC,EAAK9E,MAAM4B,QAC7DjB,EAAO,SAACoG,GACJA,EAAEC,cAAe,EACbD,EAAEE,iBACFF,EAAEE,uBAOtBvH,KAAK+B,iBAAiB,4CAMtB,GADA/B,KAAK+B,iBAAiB,SAClB/B,KAAKM,MAAO,CACZ,GAAMmH,GAASzH,KAAKM,MAAMwE,aAAa4C,aACnCD,IACAA,EAAOxJ,YAAY+B,KAAKM,MAAMwE,cAElC9E,KAAKM,MAAQ,KAEjBN,KAAKY,SAAU,EACfZ,KAAK+B,iBAAiB,0DAKtB,GAAM4F,GAAK3H,KAAKmB,SAAS2F,SAASc,wBAC5BC,GACFnI,IAAKiI,EAAGjI,IAAMM,KAAKO,MAAMd,WAAWC,IACpCC,MAAOgI,EAAGhI,MAAQK,KAAKO,MAAMd,WAAWE,MACxCC,OAAQ+H,EAAG/H,OAASI,KAAKO,MAAMd,WAAWG,OAC1CC,KAAM8H,EAAG9H,KAAOG,KAAKO,MAAMd,WAAWI,KAI1C,OAFAgI,GAAI3E,MAAQ2E,EAAIlI,MAAQkI,EAAIhI,KAC5BgI,EAAI1E,OAAS0E,EAAIjI,OAASiI,EAAInI,IACvBmI,uCAKP,GAAK7H,KAAKO,MAAMf,WAAcQ,KAAKM,MAAnC,CAGA,GAAMuH,GAAM7H,KAAK8H,oBACXC,EAAK/H,KAAKM,MAAM4B,QAAQ0F,wBAC1BI,EAAK,EACLC,EAAK,CACLJ,GAAIhI,MAAQkI,EAAGlI,KACfmI,EAAKD,EAAGlI,KAAOgI,EAAIhI,KACZgI,EAAIlI,OAASoI,EAAGpI,QACvBqI,EAAKD,EAAGlI,MAAQgI,EAAIlI,MAAQoI,EAAG7E,QAE/B2E,EAAInI,KAAOqI,EAAGrI,IACduI,EAAKF,EAAGrI,IAAMmI,EAAInI,IACXmI,EAAIjI,QAAUmI,EAAGnI,SACxBqI,EAAKF,EAAGrI,KAAOmI,EAAIjI,OAASmI,EAAG5E,SAExB,IAAP6E,GAAmB,IAAPC,GACZjI,KAAKmB,SAAS+G,MAAMF,EAAIC,qCAM5B,GAAKjI,KAAKM,MAAV,CAGA,GAAMuH,GAAM7H,KAAK8H,oBAEbK,EAAWN,EAAI3E,KACS5B,UAAxBtB,KAAKO,MAAM4H,WACXA,EAAW5E,KAAKK,IAAIuE,EAAUnI,KAAKO,MAAM4H,WAE7CA,GAAanI,KAAKM,MAAM4B,QAAQuB,YAAczD,KAAKM,MAAMvC,QAAQ0F,YACjEzD,KAAKM,MAAMvC,QAAQsE,MAAM8F,SAAcA,EAAvC,IAGA,IAAIC,GAAYP,EAAI1E,MACS7B,UAAzBtB,KAAKO,MAAM6H,YACXA,EAAY7E,KAAKK,IAAIwE,EAAWpI,KAAKO,MAAM6H,YAE/CA,GAAcpI,KAAKM,MAAM4B,QAAQ2B,aAAe7D,KAAKM,MAAMvC,QAAQ8F,aACnE7D,KAAKM,MAAMvC,QAAQsE,MAAM+F,UAAeA,EAAxC,aAzfsCtH,OAAOE,KAAKqH,uBAArCvI","file":"snazzy-info-window.min.js","sourcesContent":["// Global variables\r\nconst _classPrefix = 'si-';\r\nconst _root2 = 1.41421356237;\r\nconst _inverseRoot2 = 0.7071067811865474;\r\nconst _defaultShadow = {\r\n    h: '0px',\r\n    v: '3px',\r\n    blur: '6px',\r\n    spread: '0px',\r\n    color: '#000'\r\n};\r\nconst _defaultOptions = {\r\n    position: 'top',\r\n    pointer: true,\r\n    openOnMarkerClick: true,\r\n    closeOnMapClick: true,\r\n    showCloseButton: true,\r\n    panOnOpen: true,\r\n    edgeOffset: {\r\n        top: 20,\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 20\r\n    }\r\n};\r\n\r\n// Copy keys from the source into the target\r\nfunction copyKeys(target, source) {\r\n    if (target && source) {\r\n        Object.keys(source).forEach((key) => {\r\n            target[key] = source[key];\r\n        });\r\n    }\r\n}\r\n\r\n// We need to safely merge options from the defaults. This will make\r\n// sure settings like edgeOffset are properly assigned.\r\nfunction mergeDefaultOptions(opts) {\r\n    const copy = {};\r\n    copyKeys(copy, _defaultOptions);\r\n    copyKeys(copy, opts);\r\n    Object.keys(_defaultOptions).forEach((key) => {\r\n        const obj = _defaultOptions[key];\r\n        if (typeof obj === 'object') {\r\n            const objCopy = {};\r\n            copyKeys(objCopy, obj);\r\n            copyKeys(objCopy, copy[key]);\r\n            copy[key] = objCopy;\r\n        }\r\n    });\r\n    return copy;\r\n}\r\n\r\n// Parse a css attribute into the numeric portion and the units\r\nfunction parseAttribute(attribute, defaultValue) {\r\n    // 1em, 1.0em, 0.1em, .1em, 1.    em\r\n    const re = /^(-{0,1}\\.{0,1}\\d+(\\.\\d+)?)[\\s|\\.]*(\\w*)$/;\r\n    if (attribute && re.test(attribute)) {\r\n        const match = re.exec(attribute);\r\n        const number = match[1];\r\n        const units = match[3] || 'px';\r\n        return { value: number * 1, units, original: attribute };\r\n    }\r\n    if (defaultValue) {\r\n        return parseAttribute(defaultValue);\r\n    }\r\n    return { original: defaultValue };\r\n}\r\n\r\n// Set the html of a container. Should support both raw text and a single\r\n// DOM Element.\r\nfunction setHTML(container, content) {\r\n    if (container) {\r\n        // Clear out everything in the container\r\n        while (container.firstChild) {\r\n            container.removeChild(container.firstChild);\r\n        }\r\n        if (content) {\r\n            if (typeof content === 'string') {\r\n                container.innerHTML = content;\r\n            } else {\r\n                container.appendChild(content);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Get the opposite of a given position\r\nfunction oppositePosition(p) {\r\n    if (p === 'top') {\r\n        return 'bottom';\r\n    } else if (p === 'bottom') {\r\n        return 'top';\r\n    } else if (p === 'left') {\r\n        return 'right';\r\n    } else if (p === 'right') {\r\n        return 'left';\r\n    }\r\n    return p;\r\n}\r\n\r\n// Return the position with the first letter capitalized\r\nfunction capitalizePosition(p) {\r\n    return p.charAt(0).toUpperCase() + p.slice(1);\r\n}\r\n\r\nexport default class SnazzyInfoWindow extends google.maps.OverlayView {\r\n\r\n    constructor(opts) {\r\n        super(opts);\r\n        // Private properties\r\n        this._html = null;\r\n        this._opts = mergeDefaultOptions(opts);\r\n        this._callbacks = this._opts.callbacks || {};\r\n        this._marker = this._opts.marker;\r\n        this._isOpen = false;\r\n        this._listeners = [];\r\n\r\n        // This listener remains active when the info window is closed.\r\n        if (google && this._marker && this._opts.openOnMarkerClick) {\r\n            this._openOnMarkerClickListener = google.maps.event.addListener(this._marker, 'click', () => {\r\n                if (!this.getMap()) {\r\n                    this.open();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Validate the options\r\n        let p = this._opts.position;\r\n        if (p) {\r\n            p = p.toLowerCase();\r\n        }\r\n        if (p !== 'top' && p !== 'bottom' &&\r\n            p !== 'left' && p !== 'right') {\r\n            this._opts.position = _defaultOptions.position;\r\n        }\r\n        if (this._opts.border === undefined || this._opts.border === true) {\r\n            this._opts.border = {};\r\n        }\r\n        if (this._opts.pointer === undefined) {\r\n            this._opts.pointer = _defaultOptions.pointer;\r\n        }\r\n        if (this._opts.shadow === undefined || this._opts.shadow === true) {\r\n            this._opts.shadow = {};\r\n        }\r\n    }\r\n\r\n    // Activate the specified callback and return the result\r\n    activateCallback(callback) {\r\n        const lamda = this._callbacks[callback];\r\n        return lamda ? lamda.apply(this) : undefined;\r\n    }\r\n\r\n    // Will clear all listeners that are used during the open state.\r\n    clearListeners() {\r\n        if (google) {\r\n            if (this._listeners) {\r\n                this._listeners.forEach((listener) => {\r\n                    google.maps.event.removeListener(listener);\r\n                });\r\n            }\r\n            this._listeners = [];\r\n        }\r\n    }\r\n\r\n    // Open the info window after attaching to a specific marker.\r\n    open() {\r\n        const result = this.activateCallback('beforeOpen');\r\n        if (result !== undefined && !result) {\r\n            return;\r\n        }\r\n        if (this._marker) {\r\n            this.setMap(this._marker.getMap());\r\n        }\r\n    }\r\n\r\n    // Close the info window.\r\n    close() {\r\n        const result = this.activateCallback('beforeClose');\r\n        if (result !== undefined && !result) {\r\n            return;\r\n        }\r\n        this.clearListeners();\r\n        this.setMap(null);\r\n    }\r\n\r\n    // Force close the map and remove any event listeners attached to google\r\n    destroy() {\r\n        if (this.getMap()) {\r\n            this.setMap(null);\r\n        }\r\n\r\n        if (google) {\r\n            if (this._openOnMarkerClickListener) {\r\n                google.maps.event.removeListener(this._openOnMarkerClickListener);\r\n                this._openOnMarkerClickListener = null;\r\n            }\r\n        }\r\n        this.clearListeners();\r\n    }\r\n\r\n    setContent(content) {\r\n        this._opts.content = content;\r\n        if (this._html && this._html.content) {\r\n            setHTML(this._html.content, content);\r\n        }\r\n    }\r\n\r\n    getWrapper() {\r\n        if (this._html) {\r\n            return this._html.wrapper;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Implementation of OverlayView draw method.\r\n    draw() {\r\n        if (!this._marker || !this._html) {\r\n            return;\r\n        }\r\n\r\n        // 1. Assign offset\r\n        const offset = this._opts.offset;\r\n        if (offset) {\r\n            if (offset.left) {\r\n                this._html.wrapper.style.marginLeft = offset.left;\r\n            }\r\n            if (offset.top) {\r\n                this._html.wrapper.style.marginTop = offset.top;\r\n            }\r\n        }\r\n        // 2. Set the background color\r\n        const bg = this._opts.backgroundColor;\r\n        if (bg) {\r\n            this._html.contentWrapper.style.backgroundColor = bg;\r\n            if (this._opts.pointer) {\r\n                this._html.pointerBg.style[`border${capitalizePosition(this._opts.position)}Color`] = bg;\r\n            }\r\n        }\r\n        // 3. Padding\r\n        if (this._opts.padding) {\r\n            this._html.contentWrapper.style.padding = this._opts.padding;\r\n            if (this._opts.shadow) {\r\n                this._html.shadowFrame.style.padding = this._opts.padding;\r\n            }\r\n        }\r\n        // 4. Border radius\r\n        if (this._opts.borderRadius) {\r\n            this._html.contentWrapper.style.borderRadius = this._opts.borderRadius;\r\n            if (this._opts.shadow) {\r\n                this._html.shadowFrame.style.borderRadius = this._opts.borderRadius;\r\n            }\r\n        }\r\n        // 5. Font Size\r\n        if (this._opts.fontSize) {\r\n            this._html.wrapper.style.fontSize = this._opts.fontSize;\r\n        }\r\n        // 6. Font Color\r\n        if (this._opts.fontColor) {\r\n            this._html.contentWrapper.style.color = this._opts.fontColor;\r\n        }\r\n        // 7. Pointer\r\n        // Check if the pointer is enabled. Also make sure the value isn't just the boolean true.\r\n        if (this._opts.pointer && this._opts.pointer !== true) {\r\n            if (this._opts.shadow) {\r\n                this._html.shadowPointer.style.width = this._opts.pointer;\r\n                this._html.shadowPointer.style.height = this._opts.pointer;\r\n            }\r\n            if (this._html.pointerBorder) {\r\n                this._html.pointerBorder.style.borderWidth = this._opts.pointer;\r\n            }\r\n            this._html.pointerBg.style.borderWidth = this._opts.pointer;\r\n        }\r\n\r\n        // 8. Border\r\n        if (this._opts.border) {\r\n            // Calculate the border width\r\n            let bWidth = 0;\r\n            if (this._opts.border.width !== undefined) {\r\n                bWidth = parseAttribute(this._opts.border.width, '0px');\r\n                this._html.contentWrapper.style.borderWidth = bWidth.value + bWidth.units;\r\n            }\r\n            bWidth = Math.round((this._html.contentWrapper.offsetWidth -\r\n                     this._html.contentWrapper.clientWidth) / 2.0);\r\n            bWidth = parseAttribute(`${bWidth}px`, '0px');\r\n\r\n            if (this._opts.pointer) {\r\n                // Calculate the pointer length\r\n                let pLength = Math.min(this._html.pointerBorder.offsetHeight,\r\n                                       this._html.pointerBorder.offsetWidth);\r\n                pLength = parseAttribute(`${pLength}px`, '0px');\r\n\r\n                let triangleDiff = Math.round(bWidth.value * (_root2 - 1));\r\n                triangleDiff = Math.min(triangleDiff, pLength.value);\r\n\r\n                this._html.pointerBg.style.borderWidth =\r\n                    (pLength.value - triangleDiff) + pLength.units;\r\n\r\n                const reverseP = capitalizePosition(oppositePosition(this._opts.position));\r\n                this._html.pointerBg.style[`margin${reverseP}`] =\r\n                    triangleDiff + bWidth.units;\r\n                this._html.pointerBg.style[this._opts.position] =\r\n                    -bWidth.value + bWidth.units;\r\n            }\r\n            const color = this._opts.border.color;\r\n            if (color) {\r\n                this._html.contentWrapper.style.borderColor = color;\r\n                if (this._html.pointerBorder) {\r\n                    this._html.pointerBorder.style[`border${capitalizePosition(this._opts.position)}Color`] = color;\r\n                }\r\n            }\r\n        }\r\n        // 9. Shadow\r\n        if (this._opts.shadow) {\r\n            // Check if any of the shadow settings have actually been set\r\n            const shadow = this._opts.shadow;\r\n            const isSet = (attribute) => {\r\n                const v = shadow[attribute];\r\n                return v !== undefined && v != null;\r\n            };\r\n\r\n            if (isSet('h') || isSet('v') || isSet('blur') || isSet('spread') || isSet('color')) {\r\n                const hOffset = parseAttribute(shadow.h, _defaultShadow.h);\r\n                const vOffset = parseAttribute(shadow.v, _defaultShadow.v);\r\n                const blur = parseAttribute(shadow.blur, _defaultShadow.blur);\r\n                const spread = parseAttribute(shadow.spread, _defaultShadow.spread);\r\n                const color = shadow.color || _defaultShadow.color;\r\n                const formatBoxShadow = (h, v) => {\r\n                    return `${h} ${v} ${blur.original} ${spread.original} ${color}`;\r\n                };\r\n\r\n                this._html.shadowFrame.style.boxShadow =\r\n                    formatBoxShadow(hOffset.original, vOffset.original);\r\n\r\n                // Correctly rotate the shadows before the css transform\r\n                const hRotated = (_inverseRoot2 * (hOffset.value - vOffset.value)) + hOffset.units;\r\n                const vRotated = (_inverseRoot2 * (hOffset.value + vOffset.value)) + vOffset.units;\r\n                this._html.shadowPointerInner.style.boxShadow = formatBoxShadow(hRotated, vRotated);\r\n            }\r\n            if (this._opts.shadow.opacity) {\r\n                this._html.shadowWrapper.style.opacity = this._opts.shadow.opacity;\r\n            }\r\n        }\r\n\r\n        const markerPos = this.getProjection().fromLatLngToDivPixel(this._marker.position);\r\n        this._html.floatWrapper.style.top = `${Math.floor(markerPos.y)}px`;\r\n        this._html.floatWrapper.style.left = `${Math.floor(markerPos.x)}px`;\r\n\r\n        if (!this._isOpen) {\r\n            this._isOpen = true;\r\n            this.resize();\r\n            this.reposition();\r\n            this.activateCallback('afterOpen');\r\n        }\r\n    }\r\n\r\n    // Implementation of OverlayView onAdd method.\r\n    onAdd() {\r\n        if (this._html) {\r\n            return;\r\n        }\r\n        // Used for creating new elements\r\n        const applyCss = (element, args) => {\r\n            if (element && args) {\r\n                for (let i = 0; i < args.length; i++) {\r\n                    const className = args[i];\r\n                    if (className) {\r\n                        if (element.className) {\r\n                            element.className += ' ';\r\n                        }\r\n                        element.className += _classPrefix + className;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        const newElement = (...args) => {\r\n            const element = document.createElement('div');\r\n            applyCss(element, args);\r\n            return element;\r\n        };\r\n\r\n        this._html = {};\r\n\r\n        // 1. Create the wrapper\r\n        this._html.wrapper = newElement(\r\n            `wrapper-${this._opts.position}`\r\n        );\r\n        if (this._opts.wrapperClass) {\r\n            this._html.wrapper.className += ` ${this._opts.wrapperClass}`;\r\n        }\r\n        if (this._opts.border) {\r\n            applyCss(this._html.wrapper, ['has-border']);\r\n        }\r\n\r\n        // 2. Create the shadow\r\n        if (this._opts.shadow) {\r\n            this._html.shadowWrapper = newElement(\r\n                `shadow-wrapper-${this._opts.position}`\r\n            );\r\n            this._html.shadowFrame = newElement(\r\n                'frame',\r\n                'shadow-frame'\r\n            );\r\n            this._html.shadowWrapper.appendChild(this._html.shadowFrame);\r\n\r\n            if (this._opts.pointer) {\r\n                this._html.shadowPointer = newElement(\r\n                    `shadow-pointer-${this._opts.position}`\r\n                );\r\n                this._html.shadowPointerInner = newElement(\r\n                    `shadow-inner-pointer-${this._opts.position}`\r\n                );\r\n                this._html.shadowPointer.appendChild(this._html.shadowPointerInner);\r\n                this._html.shadowWrapper.appendChild(this._html.shadowPointer);\r\n            }\r\n\r\n            this._html.wrapper.appendChild(this._html.shadowWrapper);\r\n        }\r\n\r\n        // 3. Create the content\r\n        this._html.contentWrapper = newElement(\r\n            'frame',\r\n            'content-wrapper'\r\n        );\r\n        this._html.content = newElement(\r\n            'content'\r\n        );\r\n        if (this._opts.content) {\r\n            setHTML(this._html.content, this._opts.content);\r\n        }\r\n\r\n        // 4. Create the close button\r\n        if (this._opts.showCloseButton) {\r\n            if (this._opts.closeButtonMarkup) {\r\n                const d = document.createElement('div');\r\n                setHTML(d, this._opts.closeButtonMarkup);\r\n                this._html.closeButton = d.firstChild;\r\n            } else {\r\n                this._html.closeButton = document.createElement('button');\r\n                this._html.closeButton.setAttribute('type', 'button');\r\n                this._html.closeButton.innerHTML = '&#215;';\r\n                applyCss(this._html.closeButton, ['close-button']);\r\n            }\r\n            this._html.contentWrapper.appendChild(this._html.closeButton);\r\n        }\r\n        this._html.contentWrapper.appendChild(this._html.content);\r\n        this._html.wrapper.appendChild(this._html.contentWrapper);\r\n\r\n        // 5. Create the pointer\r\n        if (this._opts.pointer) {\r\n            if (this._opts.border) {\r\n                this._html.pointerBorder = newElement(\r\n                    `pointer-${this._opts.position}`,\r\n                    `pointer-border-${this._opts.position}`\r\n                );\r\n                this._html.wrapper.appendChild(this._html.pointerBorder);\r\n            }\r\n            this._html.pointerBg = newElement(\r\n                `pointer-${this._opts.position}`,\r\n                `pointer-bg-${this._opts.position}`\r\n            );\r\n            this._html.wrapper.appendChild(this._html.pointerBg);\r\n        }\r\n\r\n        // Create an outer wrapper\r\n        this._html.floatWrapper = newElement(\r\n            'float-wrapper'\r\n        );\r\n        this._html.floatWrapper.appendChild(this._html.wrapper);\r\n\r\n        // Add the wrapper to the Google Maps float pane\r\n        this.getPanes().floatPane.appendChild(this._html.floatWrapper);\r\n\r\n        // Now add all the event listeners\r\n        const map = this.getMap();\r\n        this.clearListeners();\r\n        if (this._opts.closeOnMapClick) {\r\n            this._listeners.push(google.maps.event.addListener(map, 'click', () => {\r\n                this.close();\r\n            }));\r\n        }\r\n        if (google) {\r\n            // Clear out the previous map bounds\r\n            this._previousWidth = null;\r\n            this._previousHeight = null;\r\n            this._listeners.push(google.maps.event.addListener(map, 'bounds_changed', () => {\r\n                const d = map.getDiv();\r\n                const ow = d.offsetWidth;\r\n                const oh = d.offsetHeight;\r\n                const pw = this._previousWidth;\r\n                const ph = this._previousHeight;\r\n                if (pw === null || ph === null || pw !== ow || ph !== oh) {\r\n                    this._previousWidth = ow;\r\n                    this._previousHeight = oh;\r\n                    this.resize();\r\n                }\r\n            }));\r\n\r\n            // Marker moves\r\n            if (this._marker) {\r\n                this._listeners.push(google.maps.event.addListener(this._marker,\r\n                    'position_changed', () => {\r\n                        this.draw();\r\n                    }));\r\n            }\r\n\r\n            // Close button\r\n            if (this._opts.showCloseButton && !this._opts.closeButtonMarkup) {\r\n                this._listeners.push(google.maps.event.addDomListener(this._html.closeButton,\r\n                    'click', (e) => {\r\n                        e.cancelBubble = true;\r\n                        if (e.stopPropagation) {\r\n                            e.stopPropagation();\r\n                        }\r\n                        this.close();\r\n                    }));\r\n            }\r\n\r\n            // Stop the mouse event propagation\r\n            const mouseEvents = ['click', 'dblclick', 'rightclick', 'contextmenu',\r\n                'drag', 'dragend', 'dragstart',\r\n                'mousedown', 'mouseout', 'mouseover', 'mouseup',\r\n                'touchstart', 'touchend', 'touchmove',\r\n                'wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];\r\n            mouseEvents.forEach((event) => {\r\n                this._listeners.push(google.maps.event.addDomListener(this._html.wrapper,\r\n                    event, (e) => {\r\n                        e.cancelBubble = true;\r\n                        if (e.stopPropagation) {\r\n                            e.stopPropagation();\r\n                        }\r\n                    }));\r\n            });\r\n        }\r\n\r\n\r\n        this.activateCallback('open');\r\n    }\r\n\r\n    // Implementation of OverlayView onRemove method\r\n    onRemove() {\r\n        this.activateCallback('close');\r\n        if (this._html) {\r\n            const parent = this._html.floatWrapper.parentElement;\r\n            if (parent) {\r\n                parent.removeChild(this._html.floatWrapper);\r\n            }\r\n            this._html = null;\r\n        }\r\n        this._isOpen = false;\r\n        this.activateCallback('afterClose');\r\n    }\r\n\r\n    // The map inner bounds used for panning and resizing\r\n    getMapInnerBounds() {\r\n        const mb = this.getMap().getDiv().getBoundingClientRect();\r\n        const mib = {\r\n            top: mb.top + this._opts.edgeOffset.top,\r\n            right: mb.right - this._opts.edgeOffset.right,\r\n            bottom: mb.bottom - this._opts.edgeOffset.bottom,\r\n            left: mb.left + this._opts.edgeOffset.left\r\n        };\r\n        mib.width = mib.right - mib.left;\r\n        mib.height = mib.bottom - mib.top;\r\n        return mib;\r\n    }\r\n\r\n    // Pan the google map such that the info window is visible\r\n    reposition() {\r\n        if (!this._opts.panOnOpen || !this._html) {\r\n            return;\r\n        }\r\n        const mib = this.getMapInnerBounds();\r\n        const wb = this._html.wrapper.getBoundingClientRect();\r\n        let dx = 0;\r\n        let dy = 0;\r\n        if (mib.left >= wb.left) {\r\n            dx = wb.left - mib.left;\r\n        } else if (mib.right <= wb.right) {\r\n            dx = wb.left - (mib.right - wb.width);\r\n        }\r\n        if (mib.top >= wb.top) {\r\n            dy = wb.top - mib.top;\r\n        } else if (mib.bottom <= wb.bottom) {\r\n            dy = wb.top - (mib.bottom - wb.height);\r\n        }\r\n        if (dx !== 0 || dy !== 0) {\r\n            this.getMap().panBy(dx, dy);\r\n        }\r\n    }\r\n\r\n    // Resize the info window to fit within the map bounds and edge offset\r\n    resize() {\r\n        if (!this._html) {\r\n            return;\r\n        }\r\n        const mib = this.getMapInnerBounds();\r\n        // Handle the max width\r\n        let maxWidth = mib.width;\r\n        if (this._opts.maxWidth !== undefined) {\r\n            maxWidth = Math.min(maxWidth, this._opts.maxWidth);\r\n        }\r\n        maxWidth -= (this._html.wrapper.offsetWidth - this._html.content.offsetWidth);\r\n        this._html.content.style.maxWidth = `${maxWidth}px`;\r\n\r\n        // Handle the max height\r\n        let maxHeight = mib.height;\r\n        if (this._opts.maxHeight !== undefined) {\r\n            maxHeight = Math.min(maxHeight, this._opts.maxHeight);\r\n        }\r\n        maxHeight -= (this._html.wrapper.offsetHeight - this._html.content.offsetHeight);\r\n        this._html.content.style.maxHeight = `${maxHeight}px`;\r\n    }\r\n}\r\n"]}